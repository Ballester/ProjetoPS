/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tela;

import backend.Computer;
import backend.Memory;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mateusmesturini
 */
public class tela extends javax.swing.JFrame {

    /**
     * Creates new form tela
     */
    public Memory memoria = new Memory(100);
    public Memory regs = new Memory(8);
    public int total_code = 0;
    Computer mv = new Computer(memoria, regs);
    int linhaTabSel = 0;
    javax.swing.Timer timer;
 
    
    
    public tela() {
        
        initComponents();
        opMode1.setSelected(true);
        filePath.setText("/home/ballester/Documents/trabalhos/ProjetoPS/src/input_ballester");
        
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        filePath = new javax.swing.JTextField();
        chooseFile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        opMode1 = new javax.swing.JRadioButton();
        opMode2 = new javax.swing.JRadioButton();
        opMode3 = new javax.swing.JRadioButton();
        closeButton = new javax.swing.JButton();
        loadCode = new javax.swing.JButton();
        runButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("File path:");

        chooseFile.setText("...");
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "opcode", "reg1", "reg2", "modEnd1", "modEnd2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Registrador", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel2.setText("Modo de Operação");

        buttonGroup1.add(opMode1);
        opMode1.setText("Run complete machine");

        buttonGroup1.add(opMode2);
        opMode2.setText("Run slowly (1s per instruction)");

        buttonGroup1.add(opMode3);
        opMode3.setText("Run step-by-step (hit RUN for next)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opMode2)
                    .addComponent(opMode1)
                    .addComponent(opMode3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opMode1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opMode2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opMode3))
        );

        closeButton.setText("Fechar");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        loadCode.setText("LOAD");
        loadCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCodeActionPerformed(evt);
            }
        });

        runButton.setText("RUN");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadCode)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(runButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chooseFile))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(closeButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chooseFile))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loadCode)
                            .addComponent(runButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(closeButton)))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        File file = fileChooser.getSelectedFile();
        String filename = file.getAbsolutePath();
        filePath.setText(filename);
    }//GEN-LAST:event_chooseFileActionPerformed

    
    //atualiza a tabela do programa
    public void atualizarTabela(Memory memoria){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        int rows = 0;
        for(int i=0; i<this.total_code;){
            int mod1 = 0;
            int mod2 = 0;
            
            String modEnd;
            String modEnd2;
            String load;
            String reg1;
            String reg2;
            short opcode;
            short internal_code;
            opcode = Short.parseShort(memoria.load(i++), 2);
          
//            System.out.println("opcde: " + opcode);
            switch(opcode) {
                case 0:
                    model.addRow(new Object[]{"NOP", "","","DIR"});
                    break;
                    
                case 1:
                    model.addRow(new Object[]{"SCC", "","","DIR"});
                    i++;
                    break;
                    
                case 2:
                    model.addRow(new Object[]{"CCC", "","","DIR"});
                    i++;
                    break;
                    
                case 3:
                    internal_code = Short.parseShort(memoria.load(i++), 2);
                    
                    switch(internal_code) {
                        case 0:
                            model.addRow(new Object[]{"BR", "","","IM"});
                            i++;
                            break;
                        case 1:
                            model.addRow(new Object[]{"BNE", "","", "IM"});
                            i++;
                            break;
                        case 2:
                            model.addRow(new Object[]{"BEQ", "","", "IM"});
                            i++;
                            break;
                        case 3:
                            model.addRow(new Object[]{"BPL", "","", "IM"});
                            i++;
                            break;
                        case 4:
                            model.addRow(new Object[]{"BMI", "","", "IM"});
                            i++;
                            break;
                        case 5:
                            model.addRow(new Object[]{"BVC", "","", "IM"});
                            i++;
                            break;
                        case 6:
                            model.addRow(new Object[]{"BVS", "", "", "IM"});
                            i++;
                            break;
                        case 7:
                            model.addRow(new Object[]{"BCC", "", "", "IM"});
                            i++;
                            break;
                        case 8:
                            model.addRow(new Object[]{"BCS", "", "", "IM"});
                            i++;
                            break;
                        case 9:
                            model.addRow(new Object[]{"BGE", "", "", "IM"});
                            i++;
                            break;
                        case 10:
                            model.addRow(new Object[]{"BLT", "", "", "IM"});
                            i++;
                            break;
                        case 11:
                            model.addRow(new Object[]{"BGT", "", "", "IM"});
                            i++;
                            break;
                        case 12:
                            model.addRow(new Object[]{"BLE", "", "", "IM"});
                            i++;
                            break;
                        case 13:
                            model.addRow(new Object[]{"BHI", "", "", "IM"});
                            i++;
                            break;
                        case 14:
                            model.addRow(new Object[]{"BLS", "", "", "IM"});
                            i++;
                            break;
                    }
                    i++;
                    break;
                    
                case 4:
                    model.addRow(new Object[]{"JMP", "","","IM"});
                    i++;i++;i++;
                    break;
                    
                case 5:
                    model.addRow(new Object[]{"SOB", "","","IM"});
                    i++;i++;i++;
                    break;
                    
                case 6:                    
                    model.addRow(new Object[]{"JSR", "","","IM"});
                    i++;i++;i++;
                    break;
                    
				
		case 7:
                    model.addRow(new Object[]{"RTS", "","","IM"});
                    i++;
                    break;
				
                case 8:
                    internal_code = Short.parseShort(memoria.load(i++), 2);
                    load = memoria.load(i++) + memoria.load(i++);
                    modEnd = load.substring(2, 5);
                    reg1 = load.substring(5, 8);
                    switch(internal_code) {
                        case 0:
                            model.addRow(new Object[]{"CLR", reg1,"", modEnd});
                            break;
                        case 1:
                            model.addRow(new Object[]{"NOT", reg1,"",modEnd});
                            break;
                        case 2:
                            model.addRow(new Object[]{"INC", reg1,"",modEnd});
                            break;
                        case 3:
                            model.addRow(new Object[]{"DEC", reg1,"",modEnd});
                            break;
                        case 4:
                            model.addRow(new Object[]{"NEG", reg1,"",modEnd});
                            break;
                        case 5:
                            model.addRow(new Object[]{"TST", reg1,"",modEnd});
                            break;
                        case 6:
                            model.addRow(new Object[]{"ROR", reg1,"",modEnd});
                            break;
                        case 7:
                            model.addRow(new Object[]{"ROL", reg1,"",modEnd});
                            break;
                        case 8:
                            model.addRow(new Object[]{"ASR", reg1,"",modEnd});
                            break;
                        case 9:
                            model.addRow(new Object[]{"ASL", reg1,"",modEnd});
                            break;
                        case 10:
                            model.addRow(new Object[]{"ADC", reg1,"",modEnd});
                            break;
                        case 11:
                            model.addRow(new Object[]{"SBC", reg1,"",modEnd});
                            break;             
                    }
                    break;
                    
					
		default:
                    if (opcode < 15) {
                        load = memoria.load(i++) + memoria.load(i++) + memoria.load(i++);
                        modEnd = load.substring(0, 3);
                        reg1 = load.substring(3, 6);
                        modEnd2 = load.substring(6, 9);
                        reg2 = load.substring(9, 12);
                        
                        switch(opcode) {
                            case 9:
                                model.addRow(new Object[]{"MOV", reg1,reg2, modEnd, modEnd2});
                                break;
                            case 10:
                                model.addRow(new Object[]{"ADD", reg1, reg2, modEnd,modEnd2});
                                break;
                            case 11:
                                model.addRow(new Object[]{"SUB", reg1, reg2, modEnd, modEnd2});
                                break;
                            case 12:
                                model.addRow(new Object[]{"CMP", reg1, reg2, modEnd, modEnd2});
                                break;
                            case 13:
                                model.addRow(new Object[]{"AND", reg1, reg2, modEnd, modEnd2});
                                break;
                            case 14:
                                model.addRow(new Object[]{"OR", reg1, reg2, modEnd, modEnd2});
                                break;

                        }
                    }
                    else {
                        model.addRow(new Object[]{"HLT", "","","DIR"});
                        i++;
                    }

                    break;
                    
            }
            if (mv.pc == i) {
                jTable1.setRowSelectionInterval(rows, rows);
            }
            rows++;
            
        
        }
        
        model.addRow(new Object[]{"", "", "",""});
//        System.out.println("Linha tab: " + linhaTabSel);
//        jTable1.setRowSelectionInterval(linhaTabSel, linhaTabSel);
//        linhaTabSel++;
//        System.out.println(linhaTabSel);
        
    }
    
    //atuzaliza tabela com registradores
    public void atualizarRegistradores(Computer mv){
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        
        model.addRow(new Object[]{"reg0", Integer.parseInt(mv.regs.load(0), 2)});
        model.addRow(new Object[]{"reg1", Integer.parseInt(mv.regs.load(1), 2)});
        model.addRow(new Object[]{"reg2", Integer.parseInt(mv.regs.load(2), 2)});
        model.addRow(new Object[]{"reg3", Integer.parseInt(mv.regs.load(3), 2)});
        model.addRow(new Object[]{"reg4", Integer.parseInt(mv.regs.load(4), 2)});
        model.addRow(new Object[]{"reg5", Integer.parseInt(mv.regs.load(5), 2)});
        model.addRow(new Object[]{"reg6", Integer.parseInt(mv.regs.load(6), 2)});
        model.addRow(new Object[]{"reg7", Integer.parseInt(mv.regs.load(7), 2)});
        
        for (int i=0; i<30; i++) {
            model.addRow(new Object[]{"mem"+i, Integer.parseInt(mv.memoria.load(i))});
        }
            
        if(mv.sp.empty()){model.addRow(new Object[]{"Stack", "empty"});}
        else{model.addRow(new Object[]{"Stack", mv.sp.peek()});}
        
        
    
    }
    
    private void loadCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCodeActionPerformed
        linhaTabSel = 0;
        try {
            
            //carrega o arquivo na memoria
            Scanner scanner;
            scanner = new Scanner(new File(filePath.getText())); 
            int i = 0;
            
            System.out.println("LOAD CODE");
            while(scanner.hasNextLine()){
                String inst = scanner.nextLine();
                
                //Every 4 binaries, store in memory
                for (int j=0; j<inst.length(); j+=4) {
                    memoria.store(inst.substring(j, j+4), i++);
                    System.out.println(memoria.load(i-1));
                }
                
                System.out.println(inst);
            }
            
            System.out.println("FIM LOAD CODE");
            //atualiza a tabela com a memoria
            this.total_code = i;
            mv.reset();
            atualizarTabela(memoria);
            mv.ri = mv.memoria.load((short) 0); //gambiarra pra atualizar o valor RI
            atualizarRegistradores(mv);
            
            
            
            
            
            
          

        } catch (FileNotFoundException ex) {
            Logger.getLogger(tela.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        

    }//GEN-LAST:event_loadCodeActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        
        short ri = Short.parseShort(mv.ri);
        
        if(opMode1.isSelected()){
            while(ri != 15){
                mv.run();
                atualizarRegistradores(mv);
                atualizarTabela(mv.memoria);
            }
        }
        
        if(opMode2.isSelected()){
            System.out.println("oi");
            timer = new Timer(1000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    System.out.println("noiz");
                    if(ri != 15){
                        mv.run();
                        atualizarRegistradores(mv);
                        atualizarTabela(mv.memoria);
                        
                    }
                    else {
                        timer.stop();
                
                        JFrame frame = new JFrame();
                        JOptionPane.showMessageDialog(frame,"DONE!");

                    }

                }

            });
            timer.start();
            timer.setInitialDelay(0);
        }
        
        
        if(opMode3.isSelected()){
            if(ri != 15){
                mv.run();
                atualizarRegistradores(mv);
                atualizarTabela(mv.memoria);
                             
            }else{
                
            }    
        }
        if(ri == 15){
            JFrame frame = new JFrame();
            JOptionPane.showMessageDialog(frame,"DONE!");
        }
        
        
    }//GEN-LAST:event_runButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton chooseFile;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField filePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton loadCode;
    private javax.swing.JRadioButton opMode1;
    private javax.swing.JRadioButton opMode2;
    private javax.swing.JRadioButton opMode3;
    private javax.swing.JButton runButton;
    // End of variables declaration//GEN-END:variables
}
